
var path = require('path');

var MainThreaded = require(path.resolve(__dirname, '../index.js'));


if(typeof define !== 'function'){ 
  define = (require('amdefine'))(module); 
}

define( ['try-require', 'co',  'co-prompt',  'axios', 'subarg', 'commander', 'path', 'clone', './tokenize.js'

, 'fs' , 'debug'], 
	   function( tryRequire,  co, prompt, axios, subarg, program, path , clone, tokenize
	 
	   , fs, debug){
 'use strict'; 
 

var shell = tryRequire("shelljs");

var errors = [];



debug.enable(module.name);
//var Console = debug(module.name + ':*');
var Console = debug(module.name + '@'+__filename);
Console.error = console.error.bind(console);
// by default stderr is used
//error('goes to stderr!');
 

// set this namespace to log via console.log
Console.log = console.log.bind(console); // don't forget to bind to console!
//log('goes to stdout');
//error('still goes to stderr!');
 
// set all output to go via console.info
// overrides all per-namespace log settings
Console.info = console.info.bind(console);
Console.warn = console.warn.bind(console);
Console.trace = console.trace.bind(console);
Console.debug = console.debug.bind(console);



const packageFile = 'package.json';	

const configFile = 'frdl.project.json';	
	
	
exports = module.exports = {
  F : F
};  	
	
	
var projectDirectory = process.cwd();
Frdlweb.prototype.projectDirectory=function(d){
	if('undefined'!==typeof d){
		projectDirectory = d;
	}
	
	return projectDirectory;
};

Frdlweb.prototype.preg_quote=preg_quote;
Frdlweb.prototype.extractTextBetween=extractTextBetween;
Frdlweb.prototype.tokenize=tokenize;
Frdlweb.prototype.resolveEXModulesLocation=resolveEXModulesLocation;


Frdlweb.prototype.readConfigFile=function(){	
var THAT =  this;
return new Promise(function(resolve, reject){
  var file = THAT.projectDirectory()  + '/' + configFile;	
	try{
        THAT.cnf = require(file);
        resolve(THAT.cnf);
	}catch(e){
        THAT.cnf = false;
     
        resolve(THAT.cnf);
	
	}
 });	
};	
	
/*	
Frdlweb.prototype.npmInit=function(){
 var THAT =  this;
 if(false === THAT.pkg){
    shell.exec('npm init -y');
 }
};
*/

Frdlweb.prototype.readPackageFile=function(){	
var THAT =  this;
return new Promise(function(resolve, reject){
  var file = THAT.projectDirectory() + '/' + packageFile;	
	try{
         THAT.pkg = require(file);
         resolve(THAT.pkg);	
	}catch(e){
        THAT.pkg = false;
      
		  resolve(THAT.pkg);	
		 
	}

 });
};	




 program	
 .version( require('./../package.json').version )
  .description('frdl command line tool (`frdl` ist the base-command)')
  .command('boilerplate [templates]', 'build selected default components')
  .command('bundlejs [entry]', 'build javascript bundle(s)')  
  .command('install-remote-files [dir]', '(Pre-)install required files from remote urls')  
  
  .command('test [url]', 'test toc URL')

 ;





program.on('option:verbose', function () {
  process.env.VERBOSE = this.verbose;
});

program.on('option:*', function () {
   
  if(process.env.VERBOSE){
  
  }
});




program.on('command:*', function () {
  
  if(process.env.VERBOSE){
  
  }
});


	
program.on('--help', function(){
  console.log('');
  console.log('Examples:');
  console.log('');
  console.log('  $ custom-help --help');
  console.log('  $ custom-help -h');
});
 program.addImplicitHelpCommand();	
	


	
  

	
(function(exports){	
  var instance;
 
	  require('@frdl/webfan').setup('workspace', {}, exports, program.version());   

 	Object.defineProperty(exports, 'Frdlweb', {
		           get : function(){
					  return Frdlweb;	               															  
				   }
	});		
	
 	Object.defineProperty(exports.Frdlweb, 'instance', {
		           get : function(){
					  return instance;	               															  
				   },
		           set : function(i){
					  instance = i;	               															  
				   }
	});		
	
	
 	Object.defineProperty(exports, 'instance', {
		           get : function(){
					  return instance;	               															  
				   },
		           set : function(i){
					  instance = i;	               															  
				   }
	});			
	
	
}(exports));	
	
	
	
  exports.F(null);

 
 function F(argv, stdout){
 
	 new Frdlweb( process.cwd() ); 
	 
    exports.instance.argv = ('string'===typeof argv) ? tokenize(argv) : argv || process.argv ;

   var res = co(function*(){
     
	   
     yield Promise.all([exports.instance.readPackageFile()])
			.then(function(cnfs){		
				
            }).catch(function(e){
			        console.warn('e', e);
		            errors.push(e);
			});

     yield Promise.all([exports.instance.readConfigFile()])
			.then(function(cnfs){		
					
            }).catch(function(e){
			        console.warn('e', e);
		            errors.push(e);
			});	   


	   
	      
		   
		   
        return errors;
   }).then(function(errors){    

		 try{       
			if(Array.isArray(argv) || 'string'===typeof argv){
				program.parse(exports.instance.argv); 	
			}
		 }catch(e){       					
			 console.warn('e', e);		    		
			 errors.push(e);	
		 }

     if(0===errors.length){
         return '';
     }else{
		 console.log('errors', errors.join('\n'));
         return errors.join('\n');
      }
   });

 }
 
 
 
 
 function Frdlweb(dir){
	this.pkg = false; 
	this.cnf = false; 
	this.projectDirectory(dir);	 
	this.argv = process.argv;
	
     exports.instance = this;
 }




function filter_boolean(value) {
		if('boolean' === typeof value)return value;
		if('undefined' === typeof value)return true;
		if(1 === value || '1' === value || 'true' === value.toLowerCase() ||  'yes' === value.toLowerCase() ||  'on' === value.toLowerCase() ){
		  return true;			 
		}
					 
		if(0 === value || '0' === value || 'false' === value.toLowerCase() ||  'no' === value.toLowerCase() ||  'off' === value.toLowerCase()	){
		  return true;			 
		}
					 

	  return true === value;
}



function preg_quote (str, delimiter) {


    /*!  Quote regular expression characters plus an optional character  
    // 
    // version: 1107.2516
    // discuss at: http://phpjs.org/functions/preg_quote
    // +   original by: booeyOH
    // +   improved by: Ates Goral (http://magnetiq.com)
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   bugfixed by: Onno Marsman
    // +   improved by: Brett Zamir (http://brett-zamir.me)
    // *     example 1: preg_quote("$40");
    // *     returns 1: '\$40'
    // *     example 2: preg_quote("*RRRING* Hello?");
    // *     returns 2: '\*RRRING\* Hello\?'
    // *     example 3: preg_quote("\\.+*?[^]$(){}=!<>|:");
    // *     returns 3: '\\\.\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:'
    */
    return (str + '').replace(new RegExp('[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\' + (delimiter || '') + '-]', 'g'), '\\$&')
            
;
}


function extractTextBetween(subject, start, end) {
    try{
        return subject.split(start)[1].split(end)[0];
    } catch(e){
        console.log("Exception when extracting text", e);
    }
}
	
	
function resolveEXModulesLocation() {
   var paths = [];
   var allowOnePath = false;
   if(process.env.NODE_PATH){
       paths = process.env.NODE_PATH.split(':');
   }
   if(process.argv.length > 2){
       for(var i=2; i<process.argv.length; i++){
           if(process.argv[i] === '--prefix' && i<process.argv.length-1){
               return process.argv[i+1];
           }
           if(process.argv[i] === '---allowOnePath'){
               allowOnePath = true;
           }
       }
   }
			
		
   return paths[0];
}
	
	
	
function exit(){
 if('function'===typeof process.exit){	
   process.exit.apply(process,  Array.prototype.splice(arguments));
 }
}




 
 
 
 
 
});
  
  

 
 
